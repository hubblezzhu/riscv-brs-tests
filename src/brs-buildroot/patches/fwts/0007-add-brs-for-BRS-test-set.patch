From fc2b19a664d7a7a3f65c26637ceaec3d9515e72b Mon Sep 17 00:00:00 2001
From: Yin Wang <yin.wang@intel.com>
Date: Thu, 14 Dec 2023 10:16:18 +0800
Subject: [PATCH 7/7] add --brs for BRS test-set

---
 src/acpi/acpitables/acpitables.c |  2 +-
 src/acpi/madt/madt.c             | 11 ++++++++++-
 src/acpi/method/method.c         |  2 +-
 src/acpi/pptt/pptt.c             |  2 +-
 src/acpi/rsdp/rsdp.c             |  2 +-
 src/acpi/spcr/spcr.c             |  2 +-
 src/acpi/xsdt/xsdt.c             |  2 +-
 src/dmi/dmicheck/dmicheck.c      |  4 ++--
 src/lib/include/fwts_framework.h |  3 ++-
 src/lib/src/fwts_framework.c     | 13 ++++++++++++-
 src/sbbr/fadt/fadt.c             |  4 ++--
 src/sbbr/rsdp/rsdp.c             |  4 ++--
 12 files changed, 36 insertions(+), 15 deletions(-)

diff --git a/src/acpi/acpitables/acpitables.c b/src/acpi/acpitables/acpitables.c
index bd99f5bb..55299cd8 100644
--- a/src/acpi/acpitables/acpitables.c
+++ b/src/acpi/acpitables/acpitables.c
@@ -365,6 +365,6 @@ static fwts_framework_ops acpi_table_check_ops = {
 };
 
 FWTS_REGISTER("acpitables", &acpi_table_check_ops, FWTS_TEST_ANYTIME,
-	      FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR)
+	      FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/acpi/madt/madt.c b/src/acpi/madt/madt.c
index 5eaf0694..de5f9695 100644
--- a/src/acpi/madt/madt.c
+++ b/src/acpi/madt/madt.c
@@ -126,6 +126,7 @@
 #define MAX_IO_APIC_ID		256 /* IO APIC ID field is 1 byte */
 
 #define SBBR_ACPI_MAJOR_VERSION 6
+#define BRS_ACPI_MAJOR_VERSION 6
 
 struct acpi_madt_subtable_lengths {
 	unsigned short major_version;	/* from revision in FADT header */
@@ -411,6 +412,14 @@ static int madt_init(fwts_framework *fw)
 			return FWTS_ERROR;
 		}
 	}
+	if (fw->flags & FWTS_FLAG_BRS) {
+		if (fadt_major < BRS_ACPI_MAJOR_VERSION) {
+			fwts_log_error(fw, "BRS support starts with ACPI v6.0,"
+					" Current revision is outdated: %" PRIu8 ".%" PRIu8,
+					fadt_major, fadt_minor);
+			return FWTS_ERROR;
+		}
+	}
 	fwts_get_fadt_version(fw, &fadt_major, &fadt_minor);
 
 	/* find the first occurrence for this version of MADT */
@@ -2127,6 +2136,6 @@ static fwts_framework_ops madt_ops = {
 	.minor_tests = madt_tests
 };
 
-FWTS_REGISTER("madt", &madt_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_COMPLIANCE_ACPI | FWTS_FLAG_SBBR)
+FWTS_REGISTER("madt", &madt_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_COMPLIANCE_ACPI | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/acpi/method/method.c b/src/acpi/method/method.c
index 27e2410d..ceccee34 100644
--- a/src/acpi/method/method.c
+++ b/src/acpi/method/method.c
@@ -5020,6 +5020,6 @@ static fwts_framework_ops method_ops = {
 };
 
 FWTS_REGISTER("method", &method_ops, FWTS_TEST_ANYTIME,
-	       FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR)
+	       FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/acpi/pptt/pptt.c b/src/acpi/pptt/pptt.c
index 8e343db0..f89245d5 100644
--- a/src/acpi/pptt/pptt.c
+++ b/src/acpi/pptt/pptt.c
@@ -189,6 +189,6 @@ static fwts_framework_ops pptt_ops = {
 	.minor_tests = pptt_tests
 };
 
-FWTS_REGISTER("pptt", &pptt_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR)
+FWTS_REGISTER("pptt", &pptt_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/acpi/rsdp/rsdp.c b/src/acpi/rsdp/rsdp.c
index 72705b36..0bc6b7a0 100644
--- a/src/acpi/rsdp/rsdp.c
+++ b/src/acpi/rsdp/rsdp.c
@@ -165,7 +165,7 @@ static int rsdp_test1(fwts_framework *fw)
 			passed = true;
 		break;
 
-	case FWTS_ARCH_RISCV:
+	case FWTS_ARCH_RISCV64:
 		if (rsdp->xsdt_address != 0)
 			passed = true;
 		break;
diff --git a/src/acpi/spcr/spcr.c b/src/acpi/spcr/spcr.c
index b58aecd4..f714489c 100644
--- a/src/acpi/spcr/spcr.c
+++ b/src/acpi/spcr/spcr.c
@@ -327,6 +327,6 @@ static fwts_framework_ops spcr_ops = {
 	.minor_tests = spcr_tests
 };
 
-FWTS_REGISTER("spcr", &spcr_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR)
+FWTS_REGISTER("spcr", &spcr_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/acpi/xsdt/xsdt.c b/src/acpi/xsdt/xsdt.c
index e10f1668..189dee49 100644
--- a/src/acpi/xsdt/xsdt.c
+++ b/src/acpi/xsdt/xsdt.c
@@ -83,6 +83,6 @@ static fwts_framework_ops xsdt_ops = {
 	.minor_tests = xsdt_tests
 };
 
-FWTS_REGISTER("xsdt", &xsdt_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR)
+FWTS_REGISTER("xsdt", &xsdt_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ACPI | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/dmi/dmicheck/dmicheck.c b/src/dmi/dmicheck/dmicheck.c
index 90c60fbb..b67323c9 100644
--- a/src/dmi/dmicheck/dmicheck.c
+++ b/src/dmi/dmicheck/dmicheck.c
@@ -24,7 +24,7 @@
 
 #include "fwts.h"
 
-#if defined(FWTS_ARCH_INTEL) || defined(FWTS_ARCH_AARCH64)
+#if defined(FWTS_ARCH_INTEL) || defined(FWTS_ARCH_AARCH64) || defined(FWTS_ARCH_RISCV)
 
 #include <stdlib.h>
 #include <stdio.h>
@@ -2378,6 +2378,6 @@ static fwts_framework_ops dmicheck_ops = {
 	.minor_tests = dmicheck_tests
 };
 
-FWTS_REGISTER("dmicheck", &dmicheck_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ROOT_PRIV | FWTS_FLAG_SBBR)
+FWTS_REGISTER("dmicheck", &dmicheck_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_BATCH | FWTS_FLAG_ROOT_PRIV | FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
diff --git a/src/lib/include/fwts_framework.h b/src/lib/include/fwts_framework.h
index 9e2a1f1f..98d4a30a 100644
--- a/src/lib/include/fwts_framework.h
+++ b/src/lib/include/fwts_framework.h
@@ -63,7 +63,8 @@ typedef enum {
 	FWTS_FLAG_COMPLIANCE_ACPI		= 0x00800000,
 	FWTS_FLAG_SBBR				= 0x01000000,
 	FWTS_FLAG_EBBR				= 0x02000000,
-	FWTS_FLAG_XBBR				= FWTS_FLAG_SBBR | FWTS_FLAG_EBBR
+	FWTS_FLAG_XBBR				= FWTS_FLAG_SBBR | FWTS_FLAG_EBBR,
+	FWTS_FLAG_BRS				= 0x04000000
 } fwts_framework_flags;
 
 /*
diff --git a/src/lib/src/fwts_framework.c b/src/lib/src/fwts_framework.c
index 3aab605e..2c7de403 100644
--- a/src/lib/src/fwts_framework.c
+++ b/src/lib/src/fwts_framework.c
@@ -59,7 +59,8 @@ typedef struct {
 	 FWTS_FLAG_ACPI |			\
 	 FWTS_FLAG_COMPLIANCE_ACPI |		\
 	 FWTS_FLAG_SBBR |			\
-	 FWTS_FLAG_EBBR)
+	 FWTS_FLAG_EBBR |			\
+	 FWTS_FLAG_BRS)
 
 static const fwts_categories categories[] = {
 	{ "ACPI",			FWTS_FLAG_ACPI },
@@ -70,6 +71,7 @@ static const fwts_categories categories[] = {
 	{ "Power States",		FWTS_FLAG_POWER_STATES },
 	{ "SBBR",			FWTS_FLAG_SBBR },
 	{ "EBBR",			FWTS_FLAG_EBBR },
+	{ "BRS",			FWTS_FLAG_BRS },
 	{ "Utilities",			FWTS_FLAG_UTILS },
 	{ "Unsafe",			FWTS_FLAG_UNSAFE },
 	{ "UEFI",			FWTS_FLAG_UEFI },
@@ -140,6 +142,7 @@ static fwts_option fwts_framework_options[] = {
 	{ "ifv",		"",   0, "Run tests in firmware-vendor modes." },
 	{ "clog",		"",   1, "Specify a coreboot logfile dump" },
 	{ "ebbr",		"",   0, "Run EBBR tests." },
+	{ "brs",		"",   0, "Run BRS tests." },
 	{ NULL, NULL, 0, NULL }
 };
 
@@ -1357,6 +1360,14 @@ int fwts_framework_options_handler(fwts_framework *fw, int argc, char * const ar
 #else
 			fprintf(stderr, "option not available on this architecture\n");
 			return FWTS_ERROR;
+#endif
+		case 50: /* --brs */
+#if defined(FWTS_ARCH_RISCV)
+			fw->flags |= FWTS_FLAG_BRS;
+			break;
+#else
+			fprintf(stderr, "option not available on this architecture\n");
+			return FWTS_ERROR;
 #endif
 		}
 		break;
diff --git a/src/sbbr/fadt/fadt.c b/src/sbbr/fadt/fadt.c
index 4f3c31d2..605fb2b9 100644
--- a/src/sbbr/fadt/fadt.c
+++ b/src/sbbr/fadt/fadt.c
@@ -20,7 +20,7 @@
  */
 #include "fwts.h"
 
-#if defined(FWTS_HAS_ACPI) && (FWTS_ARCH_AARCH64)
+#if defined(FWTS_HAS_ACPI) && (FWTS_ARCH_AARCH64 | FWTS_ARCH_RISCV)
 
 #include "fwts_acpi_object_eval.h"
 
@@ -395,5 +395,5 @@ static fwts_framework_ops fadt_sbbr_ops = {
 	.minor_tests = fadt_sbbr_tests
 };
 
-FWTS_REGISTER("fadt_sbbr", &fadt_sbbr_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_SBBR)
+FWTS_REGISTER("fadt_sbbr", &fadt_sbbr_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 #endif
diff --git a/src/sbbr/rsdp/rsdp.c b/src/sbbr/rsdp/rsdp.c
index 89e9f66f..7bdea198 100644
--- a/src/sbbr/rsdp/rsdp.c
+++ b/src/sbbr/rsdp/rsdp.c
@@ -17,7 +17,7 @@
  */
 #include "fwts.h"
 
-#if defined(FWTS_HAS_ACPI) && (FWTS_ARCH_AARCH64)
+#if defined(FWTS_HAS_ACPI) && (FWTS_ARCH_AARCH64 | FWTS_ARCH_RISCV)
 
 #include <stdlib.h>
 #include <stdio.h>
@@ -126,6 +126,6 @@ static fwts_framework_ops rsdp_sbbr_ops = {
 	.minor_tests = rsdp_sbbr_tests
 };
 
-FWTS_REGISTER("rsdp_sbbr", &rsdp_sbbr_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_SBBR)
+FWTS_REGISTER("rsdp_sbbr", &rsdp_sbbr_ops, FWTS_TEST_ANYTIME, FWTS_FLAG_SBBR | FWTS_FLAG_BRS)
 
 #endif
-- 
2.34.1

